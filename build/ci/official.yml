# Name: DotNet-Project-System
# URL: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=9675
#
# Responsible for producing the signed product build for insertion into the Visual Studio repository
#
# NOTE: triggers for this build are defined in the Web UI instead of here in the YAML file so they
#       apply to all branches.

resources:
- repo: self
  clean: true
queue:
  name: VSEngSS-MicroBuild2019-1ES
  demands: Cmd
  timeoutInMinutes: 90
variables:
  BuildConfiguration: Release
  TeamName: DotNet-Project-System
  BuildPlatform: any cpu
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- task: MicroBuildSigningPlugin@4
  displayName: Install Signing Plugin
  inputs:
    signType: real
    esrpSigning: true

- task: MicroBuildSwixPlugin@1
  # inputs:
  #   version: '1.1.224'
  displayName: Install Swix Plugin

# This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
# To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
# This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
# The MicroBuild.VisualStudio package uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
- task: MicroBuildOptProfPlugin@6
  inputs:
    ProfilingInputsDropName: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    OptimizationInputsLookupMethod: 'DropPrefix'
    DropNamePrefix: 'OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)'
    AccessToken: '$(System.AccessToken)'
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    ShouldSkipOptimize: false
    NumberCommitsToSearch: '100'
  displayName: 'Install OptProf Plugin'

# - task: MSBuild@1
#   displayName: Build Strong Name Remover
#   inputs:
#     solution: '$(Build.SourcesDirectory)\build\script\StrongNameRemover\StrongNameRemover.sln'
#     configuration: $(BuildConfiguration)

# - task: DotNetCoreCLI@2
#   displayName: Build Strong Name Remover
#   inputs:
#     command: 'publish'
#     projects: '$(Build.SourcesDirectory)\build\script\StrongNameRemover\StrongNameRemover.sln'
#     arguments: '-c $(BuildConfiguration) -r win-x64'
#     publishWebProjects: false
#     zipAfterPublish: false

# NOTE: Shouldn't need this for now since this was for manual IBC merging in the AppDesigner/Editors projects.
# - task: NuGetCommand@2
#   displayName: Restore 'Microsoft.DotNet.IBCMerge' package
#   inputs:
#     command: restore
#     feedsToUse: config
#     restoreSolution: 'build\proj\internal\RestoreIBCMerge.csproj'
#     nugetConfigPath: 'NuGet.config'

# TODO: Merged PIAs - reset to /ibc once private feeds are removed and Microsoft.DotNet.IBCMerge is reset
- script: $(Build.SourcesDirectory)\build.cmd /build /test /ci /sign /diagnostic /no-deploy /no-integration /no-ibc /no-clearnugetcache /configuration $(BuildConfiguration)
  displayName: Build ProjectSystem.sln

- task: MicroBuildCodesignVerify@3
  displayName: Verify Signed Files
  inputs:
    TargetFolders: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
    ApprovalListPathForCerts: $(Build.SourcesDirectory)\build\ci\no_authenticode.txt

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: $(Build.SourcesDirectory)\artifacts\Release\obj\Microsoft.VisualStudio.AppDesigner\
#     ArtifactName: AppDesignerObjFolder
#     ArtifactType: Container
#   displayName: 'Publish Artifact: AppDesigner Obj folder'
#   condition: succeededOrFailed()

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: $(Build.SourcesDirectory)\artifacts\Release\obj\Microsoft.VisualStudio.Editors\
#     ArtifactName: EditorsObjFolder
#     ArtifactType: Container
#   displayName: 'Publish Artifact: Editors Obj folder'
#   condition: succeededOrFailed()

# - task: Ref12.ref12-analyze-task.ref12-analyze-task.Ref12Analyze@0
#   displayName: Produce Codex index for http://index
#   inputs:
#     workflowArguments: |
#      /sourcesDirectory:$(Build.SourcesDirectory)
#      /codexRepoUrl:$(Build.Repository.Uri)
#      /repoName:$(Build.Repository.Name)
#      /additionalCodexArguments:-bld
#      /additionalCodexArguments:$(Build.SourcesDirectory)\artifacts\Release\log
#   condition: succeeded()
#   continueOnError: true

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunner: XUnit
    testResultsFiles: 'artifacts/$(BuildConfiguration)/TestResults/*.xml'
    testRunTitle: 'Unit Test Results'
  condition: succeededOrFailed()

- task: PowerShell@2
  inputs:
    filePath: build\variables\_vsts.ps1
    failOnStderr: true
  displayName: Set VSTS variables based on source

# Symbols is the one thing we cannot declare in the ps1 artifact scripts due to the extra steps
# needed and the specific order it has to be performed in. Copy -> Publish Symbols -> Publish
# Artifact -> publish to symweb

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)'
    Contents: |
      **/Microsoft.VisualStudio.ProjectSystem.Managed?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.AppDesigner?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.Editors?(*.pdb|*.dll|*.xml)
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Copy symbols

# - task: PublishSymbols@2
#   displayName: Archive symbols to VSTS
#   inputs:
#     SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
#     SearchPattern:
#       '**/*.pdb
#       **/*.dll
#       **/*.exe'
#     publishSymbols: true
#     SymbolServerType: TeamServices
#     SymbolsProduct: 'Roslyn Project System'
#     SymbolsVersion: '$(Build.BuildNumber)'
#     SymbolsArtifactName: Symbols
#   continueOnError: true

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols'
#     ArtifactName: symbols
#     publishLocation: Container
#   displayName: 'Publish Artifact: symbols'

# This is required to deploy the tests to devdiv.artifacts.visualstudio.com for the 'Deploy tests' step in the release pipeline.
- task: artifactDropTask@0
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
    toLowerCase: false
    usePat: true
    AccessToken: '$(System.AccessToken)'
  displayName: 'Publish to Artifact Services - ProfilingInputs'
  condition: succeeded()

# This is needed for signjson.exe used by MicroBuildBuildVSBootstrapper.
# - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
#   displayName: Install Signing Plugin
#   inputs:
#     signType: test
#     esrpSigning: true

- task: MicroBuildBuildVSBootstrapper@2
  inputs:
    vsMajorVersion: 17
    channelName: 'int.main'
    manifests: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\VSSetup\Insertion\Microsoft.VisualStudio.ProjectSystem.Managed.vsman'
    outputFolder: $(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\VSSetup\Insertion
    # bootstrapperCoreVersion: '1.15.76-develop-g446ca603'
    bootstrapperCoreFeedSource: 'https://devdiv.pkgs.visualstudio.com/_packaging/Setup/nuget/v3/index.json'
    bootstrapperCoreDependenciesFeedSource: 'https://devdiv.pkgs.visualstudio.com/_packaging/Setup-Dependencies/nuget/v3/index.json'
    nugetOrgPublicFeedSource: 'https://api.nuget.org/v3/index.json'
  displayName: Build VS bootstrapper
  condition: succeeded()

- task: PowerShell@2
  inputs:
    filePath: build\optprof\UpdateRunSettings.ps1
    arguments: '-profilingInputsPath "ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)" -bootstrapperInfoPath "$(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json"'
    failOnStderr: true
  displayName: Set RunSettings data from Bootstrapper

- task: artifactDropTask@0
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: '$(Build.SourcesDirectory)\build\optprof'
    toLowerCase: false
    usePat: true
    AccessToken: '$(System.AccessToken)'
    dropMetadataContainerName: RunSettings
  displayName: 'Publish to Artifact Services - RunSettings'
  condition: succeeded()

# TODO: Duplicate MicroBuild\Output publishing at bottom of file
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
    ArtifactName: MicroBuildOutputs
    ArtifactType: Container
  displayName: 'Publish Artifact: MicroBuildOutputs'
  condition: succeededOrFailed()

# TODO: DropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
- task: MicroBuildUploadVstsDropFolder@1
  displayName: Upload VSTS Drop
  inputs:
    DropFolder: 'artifacts\$(BuildConfiguration)\VSSetup\Insertion'
    AccessToken: $(System.AccessToken)

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
     artifacts\$(BuildConfiguration)\bin\**
     artifacts\$(BuildConfiguration)\DevDivInsertionFiles\**
     artifacts\$(BuildConfiguration)\log\**
     artifacts\$(BuildConfiguration)\packages\**
     artifacts\$(BuildConfiguration)\VSSetup\**
     artifacts\$(BuildConfiguration)\TestResults\**
    TargetFolder: $(Build.ArtifactStagingDirectory)/drop
  displayName: Copy Drop
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/drop/artifacts/$(BuildConfiguration)'
    ArtifactName: '$(Build.BuildNumber)'
    publishLocation: Container
  displayName: 'Publish Artifact: drop'
  condition: succeededOrFailed()

# TODO: Temp to investigate
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\obj'
#     ArtifactName: 'obj'
#     publishLocation: Container
#   displayName: 'Publish Artifact: obj'
#   condition: succeededOrFailed()

# TODO: Old sign verify location
# - task: MicroBuildCodesignVerify@3
#   displayName: Verify Signed Files
#   inputs:
#     TargetFolders: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
#     WhiteListPathForCerts: $(Build.SourcesDirectory)\build\ci\no_authenticode.txt

# - task: NuGetToolInstaller@0
#   inputs:
#     versionSpec: '4.9.2'

# # Authenticate with service connections to be able to publish packages to external nuget feeds.
# - task: NuGetAuthenticate@0
#   inputs:
#     nuGetServiceConnections: azure-public/vs-impl

# # Publishes the packages to https://dev.azure.com/azure-public/vside/_packaging?_a=feed&feed=vs-impl
# # For documentation purposes the old feeds are stored in https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=myget-legacy%40Local
# - task: NuGetCommand@2
#   displayName: NuGet push - vs-impl
#   inputs:
#     command: push
#     packagesToPush: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
#     nuGetFeedType: 'external'
#     publishFeedCredentials: azure-public/vs-impl

# - task: NuGetCommand@2
#   displayName: NuGet CoreXT publish
#   inputs:
#     command: push
#     packagesToPush: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
#     publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
#     allowPackageConflicts: true

- task: MicroBuildCleanup@1
  displayName: Perform Cleanup Tasks
  condition: always()

# TODO: Duplicate MicroBuild\Output publishing at midway through file
- task: PublishBuildArtifacts@1
  displayName: Publish MicroBuild Outputs
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)\MicroBuild\Output'
    ArtifactName: '$(Build.BuildNumber)'
    publishLocation: Container
  condition: succeededOrFailed()